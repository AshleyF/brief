assertEqual "+" 7 [ + 4 3 ]
assertEqual "-" -1 [ - 4 3 ]
assertEqual "*" 12 [ * 4 3 ]
assertEqual "/" 0.5 [ / 4 2 ]

assertEqual "reverse" [ 3 2 1 ] [ reverse [ 1 2 3 ] ]
assertEqual "fry" [ 1 foo [ 2 bar [ baz ] ] ] [ fry [ _ foo [ _ bar _ ] ] 1 2 [ [ baz ] ] ]

assertEqual "depth" 3 [ depth 1 2 3 ]
assertEqual "clear" 0 [ depth clear 1 2 3 ]

assertEqual "drop" [ ] [ @map '_stack drop 'foo ]
assertEqual "swap" [ 2 1 ] [ @map '_stack swap 1 2 ]

assertEqual "dip" [ 1 6 ] [ @map '_stack dip [ * ] 1 2 3 ]
assertEqual "if true" 5 [ if [ + ] [ * ] true 2 3 ]
assertEqual "if false" 6 [ if [ + ] [ * ] false 2 3 ]
assertEqual "if empty" 'FALSE [ if [ 'TRUE ] [ 'FALSE ] count [ ] ]
assertEqual "if not empty" 'TRUE [ if [ 'TRUE ] [ 'FALSE ] count [ 1 2 3 ] ]
assertEqual "when" 5 [ when [ + ] true 2 3 ]
assertEqual "unless" 6 [ unless [ * ] false 2 3 ]
assertEqual "unless empty" 'TRUE [ unless [ 'TRUE ] count [ ] ]

assertTrue "and true" [ and true true ]
assertFalse "and false" [ and false true ]
assertTrue "or true" [ or false true ]
assertFalse "or false" [ or false false ]
assertTrue "not true" [ not false ]
assertFalse "not false" [ not true ]

assertTrue "any? true" [ any? [ even? ] [ 3 5 2 7 ] ]
assertFalse "any? false" [ any? [ even? ] [ 3 5 7 9 ] ]
assertTrue "all? true" [ all? [ even? ] [ 2 4 6 8 ] ]
assertFalse "all? false" [ all? [ even? ] [ 2 4 7 8 ] ]

assertEqual "utf8" 'foo [ utf8> >utf8 "foo" ]
assertEqual "ieee754" 2.71828 [ ieee754> >ieee754 2.71828 ]

assertEqual "repeat" 13 [ repeat [ + 2 ] 3 7 ]
assertEqual "take" [ 0 1 2 ] [ nip take 3 [ 0 1 2 3 4 5 ] ]
assertEqual "skip" [ 3 4 5 ] [ skip 3 [ 0 1 2 3 4 5 ] ]

assertEqual "lex regular strings" [ 'test "'foo is a" 'this ] [ lex "this \"foo is a\" test" ]
assertEqual "lex tick strings" [ 'baz ''bar 'foo ] [ lex "foo 'bar baz" ]
assertEqual "lex escaped chars" [ "'\b \f \n \r \t  x" ] [ lex "\"\b \f \n \r \t \\ \x\"" ]
assertEqual "parse list" [ this [ 'is 123 a ] test ] [ parse lex "this [ 'is 123 a ] test" ]

assertTrue "serdes number" [ = deserialize serialize dup 2.71 ]
assertTrue "serdes string" [ = deserialize serialize dup "this is a test" ]
assertTrue "serdes symbol" [ = deserialize serialize dup nip snoc [ just-testing ] ]
assertTrue "serdes list" [ = deserialize serialize dup [ 1 2 3 ] ]
assertTrue "serdes nested list" [ = deserialize serialize dup [ 1 2 [ 3 4 ] 5 6 ] ]
drop [ assertTrue "serdes map" [ = deserialize serialize dup { 'foo 123  'bar "just testing" } ] ]
assertTrue "serdes nested map" [ = deserialize serialize dup { 'foo 123  'bar { 'baz 2.71 } } ]
assertTrue "serdes machine state" [ = deserialize serialize dup get-state ]
